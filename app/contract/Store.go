// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// bidTAT_list is an auto generated low-level Go binding around an user-defined struct.
type bidTAT_list struct {
	Bider      common.Address
	Amount     *big.Int
	Randomness uint8
}

// bidbid_list is an auto generated low-level Go binding around an user-defined struct.
type bidbid_list struct {
	Bider      common.Address
	Amount     *big.Int
	Variety    *big.Int
	Randomness uint8
}

// bidunit_list is an auto generated low-level Go binding around an user-defined struct.
type bidunit_list struct {
	Bider      common.Address
	Amount     *big.Int
	Randomness uint8
}

// ContractABI is the input ABI used to generate the binding from.
const ContractABI = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"variety\",\"type\":\"uint256\"}],\"name\":\"bidList\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activeValidatorSelect\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"bider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variety\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"randomness\",\"type\":\"uint8\"}],\"internalType\":\"structbid.bid_list[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bidTAT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bidUnit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBidList\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"bider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"randomness\",\"type\":\"uint8\"}],\"internalType\":\"structbid.TAT_list[]\",\"name\":\"TATList\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"bider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"randomness\",\"type\":\"uint8\"}],\"internalType\":\"structbid.unit_list[]\",\"name\":\"unitList\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAuditor\",\"type\":\"address\"}],\"name\":\"setAuditor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setTAT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]"

// ContractBin is the compiled bytecode used for deploying new contracts.
var ContractBin = "0x60806040526001600b55670de0b6b3a7640000600c55680890b0c2e14fb80000600d5534801561002e57600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612f298061007e6000396000f3fe6080604052600436106100595760003560e01c80632b231df314610065578063716094e5146100a25780639f203255146100c0578063d9df2a2d146100fd578063fb100eca1461012b578063fed648871461016857610060565b3661006057005b600080fd5b34801561007157600080fd5b5061008c60048036038101906100879190612349565b610186565b6040516100999190612391565b60405180910390f35b6100aa6105c4565b6040516100b7919061251c565b60405180910390f35b3480156100cc57600080fd5b506100e760048036038101906100e2919061256a565b6110bc565b6040516100f49190612391565b60405180910390f35b34801561010957600080fd5b50610112611161565b6040516101229493929190612788565b60405180910390f35b34801561013757600080fd5b50610152600480360381019061014d919061256a565b611aa6565b60405161015f9190612391565b60405180910390f35b610170611b4b565b60405161017d9190612391565b60405180910390f35b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506001600b54146101f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ea90612838565b60405180910390fd5b600c54831015610238576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022f906128a4565b60405180910390fd5b61024133611dc9565b15610281576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027890612910565b60405180910390fd5b828173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016102bb919061293f565b60206040518083038186803b1580156102d357600080fd5b505afa1580156102e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030b919061296f565b101561034c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610343906129e8565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663ff2559bb33856040518363ffffffff1660e01b8152600401610387929190612a08565b602060405180830381600087803b1580156103a157600080fd5b505af11580156103b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d99190612a5d565b610418576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040f90612ad6565b60405180910390fd5b61042133611e1f565b6104e1576001600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506003339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b82600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105309190612b25565b92505081905550425a60405160200161054a929190612b9c565b6040516020818303038152906040528051906020012060001c600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055506001915050919050565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000806000806105fb611161565b9350935093509350600081836106119190612b25565b67ffffffffffffffff81111561062a57610629612bc8565b5b60405190808252806020026020018201604052801561066357816020015b61065061221b565b8152602001906001900390816106485790505b5090506000600283856106769190612b25565b6106809190612c26565b67ffffffffffffffff81111561069957610698612bc8565b5b6040519080825280602002602001820160405280156106d257816020015b6106bf61221b565b8152602001906001900390816106b75790505b50905083865111156107cc5760008490505b86518110156107ca578773ffffffffffffffffffffffffffffffffffffffff1663358a2c4d88838151811061071c5761071b612c57565b5b60200260200101516000015189848151811061073b5761073a612c57565b5b6020026020010151602001516040518363ffffffff1660e01b8152600401610764929190612a08565b602060405180830381600087803b15801561077e57600080fd5b505af1158015610792573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b69190612a5d565b5080806107c290612c86565b9150506106e4565b505b828551111561087c5760008390505b855181101561087a578581815181106107f7576107f6612c57565b5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff166108fc87838151811061082f5761082e612c57565b5b6020026020010151602001519081150290604051600060405180830381858888f19350505050158015610866573d6000803e3d6000fd5b50808061087290612c86565b9150506107db565b505b60008060005b858761088e9190612b25565b811015610b1457868310156109d1578883815181106108b0576108af612c57565b5b6020026020010151600001518582815181106108cf576108ce612c57565b5b60200260200101516000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508883815181106109205761091f612c57565b5b60200260200101516020015185828151811061093f5761093e612c57565b5b60200260200101516020018181525050600185828151811061096457610963612c57565b5b6020026020010151604001818152505088838151811061098757610986612c57565b5b6020026020010151604001518582815181106109a6576109a5612c57565b5b60200260200101516060019060ff16908160ff168152505082806109c990612c86565b935050610b01565b8782815181106109e4576109e3612c57565b5b602002602001015160000151858281518110610a0357610a02612c57565b5b60200260200101516000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050878281518110610a5457610a53612c57565b5b602002602001015160200151858281518110610a7357610a72612c57565b5b602002602001015160200181815250506002858281518110610a9857610a97612c57565b5b60200260200101516040018181525050878281518110610abb57610aba612c57565b5b602002602001015160400151858281518110610ada57610ad9612c57565b5b60200260200101516060019060ff16908160ff16815250508180610afd90612c86565b9250505b8080610b0c90612c86565b915050610882565b5060005b60018551610b269190612ccf565b811015610c5e5760005b8160018751610b3f9190612ccf565b610b499190612ccf565b811015610c4a5785600182610b5e9190612b25565b81518110610b6f57610b6e612c57565b5b60200260200101516060015160ff16868281518110610b9157610b90612c57565b5b60200260200101516060015160ff161015610c3757600086600183610bb69190612b25565b81518110610bc757610bc6612c57565b5b60200260200101519050868281518110610be457610be3612c57565b5b602002602001015187600184610bfa9190612b25565b81518110610c0b57610c0a612c57565b5b602002602001018190525080878381518110610c2a57610c29612c57565b5b6020026020010181905250505b8080610c4290612c86565b915050610b30565b508080610c5690612c86565b915050610b18565b506000805b855181101561109a5760028789610c7a9190612b25565b610c849190612c26565b811015610ee957858281518110610c9e57610c9d612c57565b5b6020026020010151858281518110610cb957610cb8612c57565b5b60200260200101819052507fe3d5c3de49166e7eabe956e1a8e167684ddbcde3a1afd4dde937d8223b7b8d6b858281518110610cf857610cf7612c57565b5b602002602001015160000151868381518110610d1757610d16612c57565b5b602002602001015160200151878481518110610d3657610d35612c57565b5b602002602001015160400151604051610d5193929190612d03565b60405180910390a16001868281518110610d6e57610d6d612c57565b5b6020026020010151604001511415610e2b578a73ffffffffffffffffffffffffffffffffffffffff166342966c68878381518110610daf57610dae612c57565b5b6020026020010151602001516040518263ffffffff1660e01b8152600401610dd79190612d3a565b602060405180830381600087803b158015610df157600080fd5b505af1158015610e05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e299190612a5d565b505b6002868281518110610e4057610e3f612c57565b5b6020026020010151604001511415610ed657858181518110610e6557610e64612c57565b5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff166108fc878381518110610e9d57610e9c612c57565b5b6020026020010151602001519081150290604051600060405180830381858888f19350505050158015610ed4573d6000803e3d6000fd5b505b8180610ee190612c86565b925050611087565b6001868281518110610efe57610efd612c57565b5b6020026020010151604001511415610fdb578a73ffffffffffffffffffffffffffffffffffffffff1663358a2c4d878381518110610f3f57610f3e612c57565b5b602002602001015160000151888481518110610f5e57610f5d612c57565b5b6020026020010151602001516040518363ffffffff1660e01b8152600401610f87929190612a08565b602060405180830381600087803b158015610fa157600080fd5b505af1158015610fb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd99190612a5d565b505b6002868281518110610ff057610fef612c57565b5b60200260200101516040015114156110865785818151811061101557611014612c57565b5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff166108fc87838151811061104d5761104c612c57565b5b6020026020010151602001519081150290604051600060405180830381858888f19350505050158015611084573d6000803e3d6000fd5b505b5b808061109290612c86565b915050610c63565b506110a3611e75565b506001600b81905550839a505050505050505050505090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461111757600080fd5b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b606080600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146111c157600080fd5b6002600b8190555060008060005b6003805490508110156111fd5782806111e790612c86565b93505080806111f590612c86565b9150506111cf565b5060005b60048054905081101561122f57818061121990612c86565b925050808061122790612c86565b915050611201565b506002818361123e9190612b25565b6112489190612c26565b600e819055506004600e541015611294576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128b90612da1565b60405180910390fd5b60008267ffffffffffffffff8111156112b0576112af612bc8565b5b6040519080825280602002602001820160405280156112e957816020015b6112d661225c565b8152602001906001900390816112ce5790505b50905060008267ffffffffffffffff81111561130857611307612bc8565b5b60405190808252806020026020018201604052801561134157816020015b61132e612296565b8152602001906001900390816113265790505b50905060005b84811015611549576003818154811061136357611362612c57565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168382815181106113a1576113a0612c57565b5b60200260200101516000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060056000600383815481106113f7576113f6612c57565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548382815181106114705761146f612c57565b5b60200260200101516020018181525050600960006003838154811061149857611497612c57565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1683828151811061151e5761151d612c57565b5b60200260200101516040019060ff16908160ff1681525050808061154190612c86565b915050611347565b5060005b60018561155a9190612ccf565b8110156116915760005b816001876115729190612ccf565b61157c9190612ccf565b81101561167d57836001826115919190612b25565b815181106115a2576115a1612c57565b5b60200260200101516040015160ff168482815181106115c4576115c3612c57565b5b60200260200101516040015160ff16111561166a576000846001836115e99190612b25565b815181106115fa576115f9612c57565b5b6020026020010151905084828151811061161757611616612c57565b5b60200260200101518560018461162d9190612b25565b8151811061163e5761163d612c57565b5b60200260200101819052508085838151811061165d5761165c612c57565b5b6020026020010181905250505b808061167590612c86565b915050611564565b50808061168990612c86565b91505061154d565b5060005b8381101561189757600481815481106116b1576116b0612c57565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168282815181106116ef576116ee612c57565b5b60200260200101516000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600660006004838154811061174557611744612c57565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548282815181106117be576117bd612c57565b5b60200260200101516020018181525050600a6000600483815481106117e6576117e5612c57565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1682828151811061186c5761186b612c57565b5b60200260200101516040019060ff16908160ff1681525050808061188f90612c86565b915050611695565b5060005b6001846118a89190612ccf565b8110156119df5760005b816001866118c09190612ccf565b6118ca9190612ccf565b8110156119cb57826001826118df9190612b25565b815181106118f0576118ef612c57565b5b60200260200101516040015160ff1683828151811061191257611911612c57565b5b60200260200101516040015160ff1611156119b8576000836001836119379190612b25565b8151811061194857611947612c57565b5b6020026020010151905083828151811061196557611964612c57565b5b60200260200101518460018461197b9190612b25565b8151811061198c5761198b612c57565b5b6020026020010181905250808483815181106119ab576119aa612c57565b5b6020026020010181905250505b80806119c390612c86565b9150506118b2565b5080806119d790612c86565b91505061189b565b506064600e5411611a3457838311611a1257826002600e54611a019190612dc1565b611a0b9190612ccf565b9350611a2f565b836002600e54611a229190612dc1565b611a2c9190612ccf565b92505b611a90565b6064831080611a435750606484105b8015611a5157506064600e54115b15611a8657838311611a71578260c8611a6a9190612ccf565b9350611a81565b8360c8611a7e9190612ccf565b92505b611a8f565b60649250606493505b5b8181858597509750975097505050505090919293565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611b0157600080fd5b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b60006001600b5414611b92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b8990612838565b60405180910390fd5b600d54341015611bd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bce90612e67565b60405180910390fd5b611be033611e1f565b15611c20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1790612ed3565b60405180910390fd5b611c2933611dc9565b611ce9576001600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506004339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b34600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611d389190612b25565b92505081905550425a604051602001611d52929190612b9c565b6040516020818303038152906040528051906020012060001c600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055506001905090565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b600080600090505b600380549050811015612038576007600060038381548110611ea257611ea1612c57565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff02191690556005600060038381548110611f2f57611f2e612c57565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090556009600060038381548110611fb057611faf612c57565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff0219169055808061203090612c86565b915050611e7d565b5060005b6004805490508110156121f757600860006004838154811061206157612060612c57565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff021916905560066000600483815481106120ee576120ed612c57565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009055600a60006004838154811061216f5761216e612c57565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff021916905580806121ef90612c86565b91505061203c565b506003600061220691906122d0565b6004600061221491906122d0565b6001905090565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600060ff1681525090565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600060ff1681525090565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600060ff1681525090565b50805460008255906000526020600020908101906122ee91906122f1565b50565b5b8082111561230a5760008160009055506001016122f2565b5090565b600080fd5b6000819050919050565b61232681612313565b811461233157600080fd5b50565b6000813590506123438161231d565b92915050565b60006020828403121561235f5761235e61230e565b5b600061236d84828501612334565b91505092915050565b60008115159050919050565b61238b81612376565b82525050565b60006020820190506123a66000830184612382565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612403826123d8565b9050919050565b612413816123f8565b82525050565b61242281612313565b82525050565b600060ff82169050919050565b61243e81612428565b82525050565b60808201600082015161245a600085018261240a565b50602082015161246d6020850182612419565b5060408201516124806040850182612419565b5060608201516124936060850182612435565b50505050565b60006124a58383612444565b60808301905092915050565b6000602082019050919050565b60006124c9826123ac565b6124d381856123b7565b93506124de836123c8565b8060005b8381101561250f5781516124f68882612499565b9750612501836124b1565b9250506001810190506124e2565b5085935050505092915050565b6000602082019050818103600083015261253681846124be565b905092915050565b612547816123f8565b811461255257600080fd5b50565b6000813590506125648161253e565b92915050565b6000602082840312156125805761257f61230e565b5b600061258e84828501612555565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6060820160008201516125d9600085018261240a565b5060208201516125ec6020850182612419565b5060408201516125ff6040850182612435565b50505050565b600061261183836125c3565b60608301905092915050565b6000602082019050919050565b600061263582612597565b61263f81856125a2565b935061264a836125b3565b8060005b8381101561267b5781516126628882612605565b975061266d8361261d565b92505060018101905061264e565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6060820160008201516126ca600085018261240a565b5060208201516126dd6020850182612419565b5060408201516126f06040850182612435565b50505050565b600061270283836126b4565b60608301905092915050565b6000602082019050919050565b600061272682612688565b6127308185612693565b935061273b836126a4565b8060005b8381101561276c57815161275388826126f6565b975061275e8361270e565b92505060018101905061273f565b5085935050505092915050565b61278281612313565b82525050565b600060808201905081810360008301526127a2818761262a565b905081810360208301526127b6818661271b565b90506127c56040830185612779565b6127d26060830184612779565b95945050505050565b600082825260208201905092915050565b7f61756469746f72206973206f7065726174696f6e000000000000000000000000600082015250565b60006128226014836127db565b915061282d826127ec565b602082019050919050565b6000602082019050818103600083015261285181612815565b9050919050565b7f544154206e6f7420656e6f75676820746f206269640000000000000000000000600082015250565b600061288e6015836127db565b915061289982612858565b602082019050919050565b600060208201905081810360008301526128bd81612881565b9050919050565b7f796f75206172652062696420696e2074686520756e6974000000000000000000600082015250565b60006128fa6017836127db565b9150612905826128c4565b602082019050919050565b60006020820190508181036000830152612929816128ed565b9050919050565b612939816123f8565b82525050565b60006020820190506129546000830184612930565b92915050565b6000815190506129698161231d565b92915050565b6000602082840312156129855761298461230e565b5b60006129938482850161295a565b91505092915050565b7f5441542062616c616e6365206973206e6f7420656e6f75676800000000000000600082015250565b60006129d26019836127db565b91506129dd8261299c565b602082019050919050565b60006020820190508181036000830152612a01816129c5565b9050919050565b6000604082019050612a1d6000830185612930565b612a2a6020830184612779565b9392505050565b612a3a81612376565b8114612a4557600080fd5b50565b600081519050612a5781612a31565b92915050565b600060208284031215612a7357612a7261230e565b5b6000612a8184828501612a48565b91505092915050565b7f62696420636f7374206661696c65640000000000000000000000000000000000600082015250565b6000612ac0600f836127db565b9150612acb82612a8a565b602082019050919050565b60006020820190508181036000830152612aef81612ab3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612b3082612313565b9150612b3b83612313565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612b7057612b6f612af6565b5b828201905092915050565b6000819050919050565b612b96612b9182612313565b612b7b565b82525050565b6000612ba88285612b85565b602082019150612bb88284612b85565b6020820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612c3182612313565b9150612c3c83612313565b925082612c4c57612c4b612bf7565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000612c9182612313565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612cc457612cc3612af6565b5b600182019050919050565b6000612cda82612313565b9150612ce583612313565b925082821015612cf857612cf7612af6565b5b828203905092915050565b6000606082019050612d186000830186612930565b612d256020830185612779565b612d326040830184612779565b949350505050565b6000602082019050612d4f6000830184612779565b92915050565b7f62696465727320617265206e6f7420656e6f7567680000000000000000000000600082015250565b6000612d8b6015836127db565b9150612d9682612d55565b602082019050919050565b60006020820190508181036000830152612dba81612d7e565b9050919050565b6000612dcc82612313565b9150612dd783612313565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612e1057612e0f612af6565b5b828202905092915050565b7f756e6974206e6f7420656e6f75676820746f2062696400000000000000000000600082015250565b6000612e516016836127db565b9150612e5c82612e1b565b602082019050919050565b60006020820190508181036000830152612e8081612e44565b9050919050565b7f796f75206172652062696420696e207468652054415400000000000000000000600082015250565b6000612ebd6016836127db565b9150612ec882612e87565b602082019050919050565b60006020820190508181036000830152612eec81612eb0565b905091905056fea2646970667358221220bd3c8eb43324da56eaeb9afe9a28a050c4bf49c1db22447879a10c8dd10cfdce64736f6c63430008090033"

// DeployContract deploys a new Ethereum contract, binding an instance of Contract to it.
func DeployContract(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Contract, error) {
	parsed, err := abi.JSON(strings.NewReader(ContractABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ContractBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Contract{ContractCaller: ContractCaller{contract: contract}, ContractTransactor: ContractTransactor{contract: contract}, ContractFilterer: ContractFilterer{contract: contract}}, nil
}

// Contract is an auto generated Go binding around an Ethereum contract.
type Contract struct {
	ContractCaller     // Read-only binding to the contract
	ContractTransactor // Write-only binding to the contract
	ContractFilterer   // Log filterer for contract events
}

// ContractCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractSession struct {
	Contract     *Contract         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContractCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractCallerSession struct {
	Contract *ContractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// ContractTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractTransactorSession struct {
	Contract     *ContractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ContractRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractRaw struct {
	Contract *Contract // Generic contract binding to access the raw methods on
}

// ContractCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractCallerRaw struct {
	Contract *ContractCaller // Generic read-only contract binding to access the raw methods on
}

// ContractTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractTransactorRaw struct {
	Contract *ContractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContract creates a new instance of Contract, bound to a specific deployed contract.
func NewContract(address common.Address, backend bind.ContractBackend) (*Contract, error) {
	contract, err := bindContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Contract{ContractCaller: ContractCaller{contract: contract}, ContractTransactor: ContractTransactor{contract: contract}, ContractFilterer: ContractFilterer{contract: contract}}, nil
}

// NewContractCaller creates a new read-only instance of Contract, bound to a specific deployed contract.
func NewContractCaller(address common.Address, caller bind.ContractCaller) (*ContractCaller, error) {
	contract, err := bindContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractCaller{contract: contract}, nil
}

// NewContractTransactor creates a new write-only instance of Contract, bound to a specific deployed contract.
func NewContractTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractTransactor, error) {
	contract, err := bindContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractTransactor{contract: contract}, nil
}

// NewContractFilterer creates a new log filterer instance of Contract, bound to a specific deployed contract.
func NewContractFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractFilterer, error) {
	contract, err := bindContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractFilterer{contract: contract}, nil
}

// bindContract binds a generic wrapper to an already deployed contract.
func bindContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ContractABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contract *ContractRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract.Contract.ContractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contract *ContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.Contract.ContractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contract *ContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract.Contract.ContractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contract *ContractCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contract *ContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contract *ContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract.Contract.contract.Transact(opts, method, params...)
}

// ActiveValidatorSelect is a paid mutator transaction binding the contract method 0x716094e5.
//
// Solidity: function activeValidatorSelect() payable returns((address,uint256,uint256,uint8)[])
func (_Contract *ContractTransactor) ActiveValidatorSelect(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "activeValidatorSelect")
}

// ActiveValidatorSelect is a paid mutator transaction binding the contract method 0x716094e5.
//
// Solidity: function activeValidatorSelect() payable returns((address,uint256,uint256,uint8)[])
func (_Contract *ContractSession) ActiveValidatorSelect() (*types.Transaction, error) {
	return _Contract.Contract.ActiveValidatorSelect(&_Contract.TransactOpts)
}

// ActiveValidatorSelect is a paid mutator transaction binding the contract method 0x716094e5.
//
// Solidity: function activeValidatorSelect() payable returns((address,uint256,uint256,uint8)[])
func (_Contract *ContractTransactorSession) ActiveValidatorSelect() (*types.Transaction, error) {
	return _Contract.Contract.ActiveValidatorSelect(&_Contract.TransactOpts)
}

// BidTAT is a paid mutator transaction binding the contract method 0x2b231df3.
//
// Solidity: function bidTAT(uint256 amount) returns(bool)
func (_Contract *ContractTransactor) BidTAT(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "bidTAT", amount)
}

// BidTAT is a paid mutator transaction binding the contract method 0x2b231df3.
//
// Solidity: function bidTAT(uint256 amount) returns(bool)
func (_Contract *ContractSession) BidTAT(amount *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.BidTAT(&_Contract.TransactOpts, amount)
}

// BidTAT is a paid mutator transaction binding the contract method 0x2b231df3.
//
// Solidity: function bidTAT(uint256 amount) returns(bool)
func (_Contract *ContractTransactorSession) BidTAT(amount *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.BidTAT(&_Contract.TransactOpts, amount)
}

// BidUnit is a paid mutator transaction binding the contract method 0xfed64887.
//
// Solidity: function bidUnit() payable returns(bool)
func (_Contract *ContractTransactor) BidUnit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "bidUnit")
}

// BidUnit is a paid mutator transaction binding the contract method 0xfed64887.
//
// Solidity: function bidUnit() payable returns(bool)
func (_Contract *ContractSession) BidUnit() (*types.Transaction, error) {
	return _Contract.Contract.BidUnit(&_Contract.TransactOpts)
}

// BidUnit is a paid mutator transaction binding the contract method 0xfed64887.
//
// Solidity: function bidUnit() payable returns(bool)
func (_Contract *ContractTransactorSession) BidUnit() (*types.Transaction, error) {
	return _Contract.Contract.BidUnit(&_Contract.TransactOpts)
}

// GetBidList is a paid mutator transaction binding the contract method 0xd9df2a2d.
//
// Solidity: function getBidList() returns((address,uint256,uint8)[] TATList, (address,uint256,uint8)[] unitList, uint256 a, uint256 b)
func (_Contract *ContractTransactor) GetBidList(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "getBidList")
}

// GetBidList is a paid mutator transaction binding the contract method 0xd9df2a2d.
//
// Solidity: function getBidList() returns((address,uint256,uint8)[] TATList, (address,uint256,uint8)[] unitList, uint256 a, uint256 b)
func (_Contract *ContractSession) GetBidList() (*types.Transaction, error) {
	return _Contract.Contract.GetBidList(&_Contract.TransactOpts)
}

// GetBidList is a paid mutator transaction binding the contract method 0xd9df2a2d.
//
// Solidity: function getBidList() returns((address,uint256,uint8)[] TATList, (address,uint256,uint8)[] unitList, uint256 a, uint256 b)
func (_Contract *ContractTransactorSession) GetBidList() (*types.Transaction, error) {
	return _Contract.Contract.GetBidList(&_Contract.TransactOpts)
}

// SetAuditor is a paid mutator transaction binding the contract method 0x9f203255.
//
// Solidity: function setAuditor(address newAuditor) returns(bool)
func (_Contract *ContractTransactor) SetAuditor(opts *bind.TransactOpts, newAuditor common.Address) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "setAuditor", newAuditor)
}

// SetAuditor is a paid mutator transaction binding the contract method 0x9f203255.
//
// Solidity: function setAuditor(address newAuditor) returns(bool)
func (_Contract *ContractSession) SetAuditor(newAuditor common.Address) (*types.Transaction, error) {
	return _Contract.Contract.SetAuditor(&_Contract.TransactOpts, newAuditor)
}

// SetAuditor is a paid mutator transaction binding the contract method 0x9f203255.
//
// Solidity: function setAuditor(address newAuditor) returns(bool)
func (_Contract *ContractTransactorSession) SetAuditor(newAuditor common.Address) (*types.Transaction, error) {
	return _Contract.Contract.SetAuditor(&_Contract.TransactOpts, newAuditor)
}

// SetTAT is a paid mutator transaction binding the contract method 0xfb100eca.
//
// Solidity: function setTAT(address newAddress) returns(bool)
func (_Contract *ContractTransactor) SetTAT(opts *bind.TransactOpts, newAddress common.Address) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "setTAT", newAddress)
}

// SetTAT is a paid mutator transaction binding the contract method 0xfb100eca.
//
// Solidity: function setTAT(address newAddress) returns(bool)
func (_Contract *ContractSession) SetTAT(newAddress common.Address) (*types.Transaction, error) {
	return _Contract.Contract.SetTAT(&_Contract.TransactOpts, newAddress)
}

// SetTAT is a paid mutator transaction binding the contract method 0xfb100eca.
//
// Solidity: function setTAT(address newAddress) returns(bool)
func (_Contract *ContractTransactorSession) SetTAT(newAddress common.Address) (*types.Transaction, error) {
	return _Contract.Contract.SetTAT(&_Contract.TransactOpts, newAddress)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Contract *ContractTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Contract *ContractSession) Receive() (*types.Transaction, error) {
	return _Contract.Contract.Receive(&_Contract.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Contract *ContractTransactorSession) Receive() (*types.Transaction, error) {
	return _Contract.Contract.Receive(&_Contract.TransactOpts)
}

// ContractBidListIterator is returned from FilterBidList and is used to iterate over the raw logs and unpacked data for BidList events raised by the Contract contract.
type ContractBidListIterator struct {
	Event *ContractBidList // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractBidListIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractBidList)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractBidList)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractBidListIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractBidListIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractBidList represents a BidList event raised by the Contract contract.
type ContractBidList struct {
	Account common.Address
	Amount  *big.Int
	Variety *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterBidList is a free log retrieval operation binding the contract event 0xe3d5c3de49166e7eabe956e1a8e167684ddbcde3a1afd4dde937d8223b7b8d6b.
//
// Solidity: event bidList(address account, uint256 amount, uint256 variety)
func (_Contract *ContractFilterer) FilterBidList(opts *bind.FilterOpts) (*ContractBidListIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "bidList")
	if err != nil {
		return nil, err
	}
	return &ContractBidListIterator{contract: _Contract.contract, event: "bidList", logs: logs, sub: sub}, nil
}

// WatchBidList is a free log subscription operation binding the contract event 0xe3d5c3de49166e7eabe956e1a8e167684ddbcde3a1afd4dde937d8223b7b8d6b.
//
// Solidity: event bidList(address account, uint256 amount, uint256 variety)
func (_Contract *ContractFilterer) WatchBidList(opts *bind.WatchOpts, sink chan<- *ContractBidList) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "bidList")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractBidList)
				if err := _Contract.contract.UnpackLog(event, "bidList", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBidList is a log parse operation binding the contract event 0xe3d5c3de49166e7eabe956e1a8e167684ddbcde3a1afd4dde937d8223b7b8d6b.
//
// Solidity: event bidList(address account, uint256 amount, uint256 variety)
func (_Contract *ContractFilterer) ParseBidList(log types.Log) (*ContractBidList, error) {
	event := new(ContractBidList)
	if err := _Contract.contract.UnpackLog(event, "bidList", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
